import { SchoolSearch, TeacherRatings, TeacherList } from "./types";
declare const HEADERS: {
    "User-Agent": string;
    Accept: string;
    "Accept-Language": string;
    "Content-Type": string;
    Authorization: string;
    "Sec-GPC": string;
    "Sec-Fetch-Dest": string;
    "Sec-Fetch-Mode": string;
    "Sec-Fetch-Site": string;
    Priority: string;
};
declare const TEACHER_BODY_QUERY = "\"query TeacherSearchResultsPageQuery(\\n  $query: TeacherSearchQuery!\\n  $schoolID: ID\\n  $includeSchoolFilter: Boolean!\\n) {\\n  search: newSearch {\\n    ...TeacherSearchPagination_search_1ZLmLD\\n  }\\n  school: node(id: $schoolID) @include(if: $includeSchoolFilter) {\\n    __typename\\n    ... on School {\\n      name\\n    }\\n    id\\n  }\\n}\\n\\nfragment TeacherSearchPagination_search_1ZLmLD on newSearch {\\n  teachers(query: $query, first: 8, after: \\\"\\\") {\\n    didFallback\\n    edges {\\n      cursor\\n      node {\\n        ...TeacherCard_teacher\\n        id\\n        __typename\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n    resultCount\\n    filters {\\n      field\\n      options {\\n        value\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment TeacherCard_teacher on Teacher {\\n  id\\n  legacyId\\n  avgRating\\n  numRatings\\n  ...CardFeedback_teacher\\n  ...CardSchool_teacher\\n  ...CardName_teacher\\n  ...TeacherBookmark_teacher\\n}\\n\\nfragment CardFeedback_teacher on Teacher {\\n  wouldTakeAgainPercent\\n  avgDifficulty\\n}\\n\\nfragment CardSchool_teacher on Teacher {\\n  department\\n  school {\\n    name\\n    id\\n  }\\n}\\n\\nfragment CardName_teacher on Teacher {\\n  firstName\\n  lastName\\n}\\n\\nfragment TeacherBookmark_teacher on Teacher {\\n  id\\n  isSaved\\n}\\n\"";
declare const API_LINK: string;
declare const TEACHER_COMMENTS: String;
declare const GET_TEACHER_ID_QUERY: String;
declare const TEACHER_LIST_QUERY: String;
declare const TEACHER_RATING_QUERY = "query RatingsListQuery(\n    $count: Int!\n    $id: ID!\n    $courseFilter: String\n    $cursor: String\n  ) {\n    node(id: $id) {\n      __typename\n      ... on Teacher {\n        firstName\n        lastName\n        department\n        school {\n          name\n          city\n          state\n        }\n        ratings(first: $count, after: $cursor, courseFilter: $courseFilter) {\n          edges {\n            node {\n              comment\n              class\n              date\n              helpfulRating\n              clarityRating\n              difficultyRating\n              grade\n              wouldTakeAgain\n              isForOnlineClass\n              isForCredit\n              attendanceMandatory\n              textbookUse\n              ratingTags\n              thumbsUpTotal\n              thumbsDownTotal\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }";
declare const TEACHER_LIST = "query TeacherSearchResultsPageQuery(\n        $query: TeacherSearchQuery!\n        $schoolID: ID\n        $includeSchoolFilter: Boolean!\n    ) {\n        search: newSearch {\n            teachers(query: $query, first: 1000, after: \"\") {\n                edges {\n                    node {\n                        id\n                        legacyId\n                        firstName\n                        lastName\n                        department\n                        avgRating\n                        numRatings\n                        wouldTakeAgainPercent\n                        avgDifficulty\n                        school {\n                            name\n                            id\n                        }\n                    }\n                }\n                pageInfo {\n                    hasNextPage\n                    endCursor\n                }\n                resultCount\n            }\n        }\n        school: node(id: $schoolID) @include(if: $includeSchoolFilter) {\n            __typename\n            ... on School {\n                name\n            }\n            id\n        }\n    }";
declare const TEACHER_RATING: string;
declare const SCHOOL_BODY_QUERY = "\"query NewSearchSchoolsQuery(\\n  $query: SchoolSearchQuery!\\n) {\\n  newSearch {\\n    schools(query: $query) {\\n      edges {\\n        cursor\\n        node {\\n          id\\n          legacyId\\n          name\\n          city\\n          state\\n          departments {\\n            id\\n            name\\n          }\\n          numRatings\\n          avgRatingRounded\\n          summary {\\n            campusCondition\\n            campusLocation\\n            careerOpportunities\\n            clubAndEventActivities\\n            foodQuality\\n            internetSpeed\\n            libraryCondition\\n            schoolReputation\\n            schoolSafety\\n            schoolSatisfaction\\n            socialActivities\\n          }\\n        }\\n      }\\n      pageInfo {\\n        hasNextPage\\n        endCursor\\n      }\\n    }\\n  }\\n}\\n\"";
declare function search_school(schoolName: String): Promise<SchoolSearch>;
declare function filter_school(raw_school_data: SchoolSearch, original_school_name: string): Promise<SchoolSearch>;
declare function retrieve_school_id(school_name: string): Promise<String>;
declare function search_teacher(professor_name: string, school_name: string): Promise<any>;
declare function get_professor_rating(professor_name: string, college_name: string): Promise<TeacherRatings[]>;
declare function get_professor_list_by_school(college_name: string): Promise<TeacherList[]>;
export { search_school, retrieve_school_id, filter_school, search_teacher, get_professor_rating, get_professor_list_by_school, API_LINK, TEACHER_BODY_QUERY, TEACHER_COMMENTS, TEACHER_RATING, TEACHER_RATING_QUERY, TEACHER_LIST_QUERY, GET_TEACHER_ID_QUERY, SCHOOL_BODY_QUERY, TEACHER_LIST, HEADERS, };
